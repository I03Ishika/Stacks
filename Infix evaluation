class Solution {
    public int calculate(String s) 
    {
        Stack<Integer> opnds = new Stack<>();
        Stack<Character> optors = new Stack<>();
        for(int i=0; i<s.length(); i++)
        {
            char ch = s.charAt(i);
             
            if(ch == '('){
                optors.push(ch);
            }else if(Character.isDigit(ch)){
                opnds.push(ch - '0');//char to int

            }else if(ch == ')'){
                while(optors.peek() != '(')
                {
                    char optor = optors.pop();
                    int v2 = opnds.pop();
                    int v1 = opnds.pop();

                    int opv = operation(v1, v2, optor);
                    opnds.push(opv);
                }
                optors.pop();
            }else if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
                // ch is wanting higher priority to solve first
                while(optors.size()>0 && optors.peek()!='(' && precedence(ch)<=precedence(optors.peek())){
                    char optor = optors.pop();
                    int v2 = opnds.pop();
                    int v1 = opnds.pop();

                    int opv = operation(v1, v2, optor);
                    opnds.push(opv);
                }

                //ch is pushing itself
                optors.push(ch);
            }
        }

        while(optors.size() != 0)
        {
            char optor = optors.pop();
            int v2 = opnds.pop();
            int v1 = opnds.pop();

            int opv = operation(v1, v2, optor);
            opnds.push(opv);
        }
        return opnds.peek();
    }
    public static int precedence(char operator)
    {
        if(operator == '+'){
            return 1;
        }else if(operator == '-'){
            return 1;
        }else if(operator == '*'){
            return 2;
        }else{
            return 2;
        }
    }
    public static int operation(int v1, int v2, char operator){
        if(operator == '+'){
            return v1 + v2;
        }else if(operator == '-'){
            return v1 - v2;
        }else if(operator == '*'){
            return v1 * v2;
        }else{
            return v1 / v2;
        }
    }

        int[] ans = calculate(s.toCharArray(), 0);
        return ans[0];
    }
